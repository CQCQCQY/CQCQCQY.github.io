<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>github+hexo搭建个人博客</title>
    <url>/posts/85811f6c.html</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="下载安装git"><a href="#下载安装git" class="headerlink" title="下载安装git"></a>下载安装git</h2><p><a href="https://git-scm.com/download/win">git下载地址：</a><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p>
<h2 id="下载安装node-js"><a href="#下载安装node-js" class="headerlink" title="下载安装node.js"></a>下载安装node.js</h2><p><a href="http://nodejs.cn/download/">node.js下载地址：</a><a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a></p>
<h3 id="检查git和node-js是否安装成功"><a href="#检查git和node-js是否安装成功" class="headerlink" title="检查git和node.js是否安装成功"></a>检查git和node.js是否安装成功</h3><p><img src="https://img-blog.csdnimg.cn/7230e92dd8da471ea121d31202712ead.png" alt="git安装后"></p>
<p>打开cmd</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git --version #查看git版本</span><br><span class="line">node -v #查看node版本</span><br><span class="line">npm -v #查看npm版本</span><br></pre></td></tr></table></figure>
<h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h1 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h1><h2 id="本地博客"><a href="#本地博客" class="headerlink" title="本地博客"></a>本地博客</h2><p>在桌面打开<code>git bash here</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init 文件夹名</span><br><span class="line">cd 文件夹名</span><br></pre></td></tr></table></figure>
<p>其中文件夹名就是你以后博客要上传下载的文件夹，我个人命名为：<code>bolg</code>，然后扫描进入该文件夹<code>blog</code></p>
<p>进行到这里，再进行下面的操作就可以在本地打开hexo的博客网站了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clea</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>
<p>这些命令的作用，在文章下面会说到<br>接着，在浏览器中输入 localhost:4000 就可以看到生成的博客页面了。</p>
<p>ctrl + c 可以关掉服务。</p>
<h2 id="通过github搭建博客"><a href="#通过github搭建博客" class="headerlink" title="通过github搭建博客"></a>通过github搭建博客</h2><h3 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h3><p>1.首先，你先要有一个GitHub账户，去注册一个吧。</p>
<p>2.注册完登录后，在GitHub.com中看到一个New repository，新建仓库。</p>
<p>3.创建一个和你用户名相同的仓库，后面加.github.io，只有这样，将来要部署到GitHub page的时候，才会被识别，也就是xxxx.github.io，其中xxx就是你注册GitHub的用户名。我github用户名是 CQCQCQY，所以我的叫 CQCQCQY.github.io</p>
<h3 id="生成-SSH-添加到-github-仓库"><a href="#生成-SSH-添加到-github-仓库" class="headerlink" title="生成 SSH 添加到 github 仓库"></a>生成 SSH 添加到 github 仓库</h3><p>在<code>git bash here</code>中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;yourname&quot;</span><br><span class="line">git config --global user.email &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>其中，yourname就是你github的用户名，youremail就是你github的邮箱<br>检查上面步骤是否成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>
<p>然后创建SSH,一路回车</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail&quot;</span><br></pre></td></tr></table></figure>
<p>这个时候它会告诉你已经生成了.ssh的文件夹。在你的电脑中找到这个文件夹。这个文件夹就是在用户文件夹里面，有个<code>.ssh</code>文件夹，打开可以看到</p>
<p><img src="https://img-blog.csdnimg.cn/486840c4e1b543779616ed4c2cd2421b.png" alt="ssh文件"><br>而后在 github 的 setting 中，找到 SSH keys 的设置选项，点击 New SSH key 把你的 id_rsa.pub 里面的信息复制进去。<br><img src="https://img-blog.csdnimg.cn/f60c97d75413495a946dd60e542948f6.png" alt="添加ssh"><br>之后，在 gitbash 中输入以下指令，查看是否 SSH 是否已绑定成功。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>
<h2 id="将-hexo-部署到-github"><a href="#将-hexo-部署到-github" class="headerlink" title="将 hexo 部署到 github"></a>将 hexo 部署到 github</h2><p>这一步，我们就可以将 hexo 和 github 关联起来，也就是将 hexo 生成的文章部署到 github 上，打开站点配置文件 _config.yml，翻到最后，进行如下修改即可，CQCQCQY改为你的 github 账户用户名。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: &#x27;git&#x27;</span><br><span class="line">  repo: &#x27;https://github.com/CQCQCQY/CQCQCQY.github.io.git&#x27;</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>
<p>这个时候需要先安装deploy-git ，也就是部署的命令,这样你才能用命令部署到GitHub。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>进行部署</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p><code>hexo clean</code> 清除了你之前生成的东西，可以用 <code>hexo cl</code></p>
<p><code>hexo generate</code> 生成静态文章，可以用 <code>hexo g</code> 缩写</p>
<p><code>hexo deploy</code> 部署文章，可以用 <code>hexo d</code> 缩写</p>
<p>等到你收到 github 和 hexo 对接起来的邮件或者弹窗，到时候你访问 http:&#x2F;&#x2F;你的用户名.github.io 这个网站看到你自己的博客了！</p>
<h1 id="上传文章"><a href="#上传文章" class="headerlink" title="上传文章"></a>上传文章</h1><p>可以通过 typora 新建 <code>.md</code> 文件，其中 typora 下载地址：<a href="https://download.typora.io/windows/typora-update-x64-1117.exe">https://download.typora.io/windows/typora-update-x64-1117.exe</a><br>把 <code>.md</code> 文件夹 <code>blog</code> 目录下的 <code>\blog\source\_posts中</code>，如图<br><img src="https://img-blog.csdnimg.cn/79db6a50fa8a4a97871371a453adde67.png" alt="上传文件到hexo和github"><br>然后在 <code>git bash here</code>，依次执行下面代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/b73af6c68b0f421e811f08de99dc8af1.png" alt="上传操作"><br>参考自：<a href="https://segmentfault.com/q/1010000018159092">https://segmentfault.com/q/1010000018159092</a></p>
<p>若出现下面错误，不要怕，应该是网络原因，重复上面三个命令应该就可以了<br><img src="https://img-blog.csdnimg.cn/da55c11ab1e6437db1e2e04196ef9326.png" alt="128错误"></p>
]]></content>
  </entry>
  <entry>
    <title>idea的debug</title>
    <url>/posts/bffecce1.html</url>
    <content><![CDATA[<p><img src="https://img-blog.csdnimg.cn/82e5af50e47345ac98bcbed67333bd02.png" alt="idea的debug"></p>
<table>
<thead>
<tr>
<th align="center">图标</th>
<th align="center">操作目的</th>
</tr>
</thead>
<tbody><tr>
<td align="center">三横</td>
<td align="center">将光标回到当前代码执行处</td>
</tr>
<tr>
<td align="center">蓝折箭头</td>
<td align="center">一步一步来执行，不会进入方法</td>
</tr>
<tr>
<td align="center">蓝↓</td>
<td align="center">只会进入自定义方法</td>
</tr>
<tr>
<td align="center">红↓</td>
<td align="center">会跳进系统方法和系统方法</td>
</tr>
<tr>
<td align="center">蓝↑</td>
<td align="center">会跳出方法</td>
</tr>
<tr>
<td align="center">斜蓝箭头</td>
<td align="center">会执行光标到指定位置</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>idea教程</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客绑定到个人域名</title>
    <url>/posts/56d0b0fe.html</url>
    <content><![CDATA[<h1 id="1-购买域名"><a href="#1-购买域名" class="headerlink" title="1 购买域名"></a>1 购买域名</h1><p>推荐使用阿里云、腾讯云等</p>
<h1 id="2-域名解析"><a href="#2-域名解析" class="headerlink" title="2 域名解析"></a>2 域名解析</h1><p>在阿里云里面使用域名解析</p>
<p><img src="https://img-blog.csdnimg.cn/ab3d780261b34b62ae9cb74539e7fc18.png" alt="域名解析"></p>
<p><img src="https://img-blog.csdnimg.cn/e5644ae1147a41188d352dd3513c44a4.png" alt="解析记录"></p>
<h1 id="3-设置CNAME"><a href="#3-设置CNAME" class="headerlink" title="3 设置CNAME"></a>3 设置CNAME</h1><p>在 hexo 项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名。比如：cqcqcqy.cn</p>
<p>在 github 上面，打开 username.github.io 项目的（Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名。比如：</p>
<p><img src="https://img-blog.csdnimg.cn/b99c6c02003949a0bbd2a59fea65058c.png" alt="github里面绑定域名"></p>
<p>至此，就可以访问你解析的域名啦~</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>安装jdk和idea</title>
    <url>/posts/1c2a6d1d.html</url>
    <content><![CDATA[<h1 id="jdk的下载、安装和配置"><a href="#jdk的下载、安装和配置" class="headerlink" title="jdk的下载、安装和配置"></a>jdk的下载、安装和配置</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>到jdk官网下载对应的版本：<br><a href="https://www.oracle.com/java/technologies/downloads/archive/">官网：</a><a href="https://www.oracle.com/java/technologies/downloads/archive/">https://www.oracle.com/java/technologies/downloads/archive/</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装一直点next就可以，期间可以<font face="微软雅黑" color=#FF0000 size=3> <strong>更改jdk的安装目录：</strong></font>，这个安装目录需要在配置系统环境的时候用上。<br>例如，我的安装路径是<code>C:\jdk</code></p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>修改环境变量的方法是：（我的电脑）→右键属性→高级系统设置→环境变量<br><img src="https://img-blog.csdnimg.cn/bb8fd13d8d9c4b25901d35b08313563f.png" alt="高级系统设置"></p>
<h3 id="配置-JAVA-HOME"><a href="#配置-JAVA-HOME" class="headerlink" title="配置 JAVA_HOME"></a>配置<font face="微软雅黑" color=#FF0000 size=3> <strong>JAVA_HOME</strong></font></h3><p>在<font face="微软雅黑" color=#FF0000 size=3> <strong>系统变量</strong></font>中，新建JAVA_HOME，然后把我们jdk的安装根目录放上去</p>
<p><img src="https://img-blog.csdnimg.cn/92b4c85024914df7aa46fddea465f4b6.png" alt="java_home jdk根目录"></p>
<h3 id="配置-Path"><a href="#配置-Path" class="headerlink" title="配置 Path"></a>配置<font face="微软雅黑" color=#FF0000 size=3> <strong>Path</strong></font></h3><p>在系统变量中，我们找到Path编辑，将刚刚新建的JAVA_HOME变量加上bin目录设置到PATH中，即是新建一个，添加上：<code>%JAVA_HOME%\bin;%JAVA_HOME%\jre\bin; </code></p>
<p><img src="https://img-blog.csdnimg.cn/6651bd6687834d76942c0de2ae9367b6.png" alt="配置jdkpath"></p>
<h3 id="检验jdk是否安装成功"><a href="#检验jdk是否安装成功" class="headerlink" title="检验jdk是否安装成功"></a>检验jdk是否安装成功</h3><p>打开cmd，输入<code>java -version</code><br><img src="https://img-blog.csdnimg.cn/4e6fd5780f2849a087349e92a545bf20.png" alt="java -version"><br>输入 <code>java</code><br><img src="https://img-blog.csdnimg.cn/d782986ccf214fa9932e60495fa10ad9.png" alt="java输入"><br>输入<code>javac</code><br><img src="https://img-blog.csdnimg.cn/46c8b066c8c6454f91c98ad242da139e.png" alt="输入javac"><br>若都以上三种相关信息，则说明jdk安装成功；如果没有出现以上情况，可以重新检查一下配置环境那里。</p>
<h1 id="下载安装idea"><a href="#下载安装idea" class="headerlink" title="下载安装idea"></a>下载安装idea</h1><h2 id="idea下载和安装可以参考这篇文章"><a href="#idea下载和安装可以参考这篇文章" class="headerlink" title="idea下载和安装可以参考这篇文章"></a><a href="https://blog.csdn.net/CQCQCQY/article/details/121300830">idea下载和安装可以参考这篇文章</a></h2><p><a href="https://blog.csdn.net/CQCQCQY/article/details/121300830">https://blog.csdn.net/CQCQCQY/article/details/121300830</a></p>
<h1 id="IDEA如何进行debug调试"><a href="#IDEA如何进行debug调试" class="headerlink" title="IDEA如何进行debug调试"></a>IDEA如何进行debug调试</h1><p><a href="https://blog.csdn.net/mjh1667002013/article/details/114750192">debug参考链接：</a><a href="https://blog.csdn.net/mjh1667002013/article/details/114750192">https://blog.csdn.net/mjh1667002013/article/details/114750192</a></p>
<h1 id="IDEA创建项目的三种方式"><a href="#IDEA创建项目的三种方式" class="headerlink" title="IDEA创建项目的三种方式"></a>IDEA创建项目的三种方式</h1><p><a href="https://blog.csdn.net/weixin_50034122/article/details/118754521">创建项目：</a><a href="https://blog.csdn.net/weixin_50034122/article/details/118754521">https://blog.csdn.net/weixin_50034122/article/details/118754521</a></p>
]]></content>
      <categories>
        <category>安装下载</category>
      </categories>
      <tags>
        <tag>idea</tag>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>typora语法</title>
    <url>/posts/3a526c11.html</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="1-字体编辑"><a href="#1-字体编辑" class="headerlink" title="1.字体编辑"></a>1.字体编辑</h1><h2 id="1-1-标题"><a href="#1-1-标题" class="headerlink" title="1.1 标题"></a>1.1 标题</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 一级标题 快捷键Ctrl+1</span><br><span class="line">## 二级标题 快捷键Ctrl+2</span><br><span class="line">### 三级标题 快捷键Ctrl+3</span><br><span class="line">#### 四级标题 快捷键Ctrl+4</span><br><span class="line">##### 五级标题 快捷键Ctrl+5</span><br><span class="line">###### 六级标题 快捷键Ctrl+6</span><br></pre></td></tr></table></figure>

<h2 id="1-2-字体大小"><a href="#1-2-字体大小" class="headerlink" title="1.2 字体大小"></a>1.2 字体大小</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">快捷键：Ctrl+数字</span><br></pre></td></tr></table></figure>

<p>例如：我的字体是10</p>
<h2 id="1-3-字体加粗"><a href="#1-3-字体加粗" class="headerlink" title="1.3 字体加粗"></a>1.3 字体加粗</h2><p><strong>加粗的快捷键是 Ctrl+b</strong></p>
<p>也可以是** <strong>加粗内容</strong> **</p>
<h2 id="1-4-斜体"><a href="#1-4-斜体" class="headerlink" title="1.4 斜体"></a>1.4 斜体</h2><p>斜体的操作是  * <em>斜体的内容</em> *</p>
<h2 id="1-5-删除线"><a href="#1-5-删除线" class="headerlink" title="1.5 删除线"></a>1.5 删除线</h2><p>删除线的操作是 ~~ <del>删除的内容</del> ~~</p>
<h2 id="1-6-下划线"><a href="#1-6-下划线" class="headerlink" title="1.6 下划线"></a>1.6 下划线</h2><p>快捷键是 Ctrl+u</p>
<p>也可以 <u><u>下划线内容</u></u></p>
<h2 id="1-7-文本居中"><a href="#1-7-文本居中" class="headerlink" title="1.7 文本居中"></a>1.7 文本居中</h2><p>操作是 <center> 居中的内容 </center>，下面是示例</p>
<center>用center居中啦</center>

<h2 id="1-8-文字高亮"><a href="#1-8-文字高亮" class="headerlink" title="1.8 文字高亮"></a>1.8 文字高亮</h2><p>高亮操作是 &#x3D;&#x3D; &#x3D;&#x3D;高亮文字&#x3D;&#x3D; &#x3D;&#x3D;</p>
<h1 id="2-列表"><a href="#2-列表" class="headerlink" title="2. 列表"></a>2. 列表</h1><h2 id="2-1-有序列表"><a href="#2-1-有序列表" class="headerlink" title="2.1 有序列表"></a>2.1 有序列表</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">操作：数字+英文小数点(.)+空格</span><br></pre></td></tr></table></figure>

<ol>
<li>第一个</li>
<li>第二个</li>
</ol>
<h2 id="2-2-无序列表"><a href="#2-2-无序列表" class="headerlink" title="2.2 无序列表"></a>2.2 无序列表</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">操作：- +空格 或 * + 空格</span><br></pre></td></tr></table></figure>

<ul>
<li>一个</li>
<li>两个</li>
</ul>
<h1 id="3-插入"><a href="#3-插入" class="headerlink" title="3. 插入"></a>3. 插入</h1><h2 id="3-1-插入代码块"><a href="#3-1-插入代码块" class="headerlink" title="3.1 插入代码块"></a>3.1 插入代码块</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">快捷键：shift+~~~``</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<h2 id="3-2-插入链接"><a href="#3-2-插入链接" class="headerlink" title="3.2 插入链接"></a>3.2 插入链接</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">操 作:Ctrl+k弹出后，输入 [输入标题名](输入链接地址) 即可</span><br><span class="line">示 例1：[这里是我的博客](https://cqcqcqy.github.io/)</span><br><span class="line">示 例2：这是 [百度一下，你就知道](https://www.baidu.com/ &quot;百度&quot;) 的链接.  </span><br><span class="line">示 例3：这是 [github][1] 的链接.  </span><br><span class="line">       [1]: https://github.com/ &quot;github&quot;</span><br><span class="line">ps：按住ctrl点击链接可直接打开</span><br></pre></td></tr></table></figure>

<p><a href="%5BCQCQCQY%5D(https://cqcqcqy.github.io/)">这里是我的博客</a></p>
<p>这是<a href="https://cqcqcqy.github.io/">百度</a>的链接</p>
<p>这是[github][1]的链接.</p>
<p>[1]: <a href="https://github.com/">https://github.com/</a>	“github”</p>
<h2 id="3-3-插入图片"><a href="#3-3-插入图片" class="headerlink" title="3.3 插入图片"></a>3.3 插入图片</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">操作：直接拖动  或 ctrl+shift+i(相对路径地址)</span><br><span class="line">示例：![](C:\1.jpg)</span><br></pre></td></tr></table></figure>

<p>![插入图片示例](D:\我的东西\壁纸\壁纸\image (23).jpg)</p>
<h2 id="3-4-插入表格"><a href="#3-4-插入表格" class="headerlink" title="3.4 插入表格"></a>3.4 插入表格</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">快捷键：ctrl+t</span><br><span class="line">示 例：按完快捷键后，弹出下图，选择对应的行和列，点击确定即可。</span><br></pre></td></tr></table></figure>

<h2 id="3-5-插入分隔符"><a href="#3-5-插入分隔符" class="headerlink" title="3.5 插入分隔符"></a>3.5 插入分隔符</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">操作：--- + enter  或者 *** + enter</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<center>上面就是分隔符</center>

<h2 id="3-6-插入表情"><a href="#3-6-插入表情" class="headerlink" title="3. 6 插入表情"></a>3. 6 插入表情</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">操作： ：+ 单词 +:</span><br><span class="line">示例： :smile:</span><br><span class="line">      :cry:</span><br></pre></td></tr></table></figure>

<p>:smile:</p>
<p>:cry:</p>
<h2 id="3-7-插入目录"><a href="#3-7-插入目录" class="headerlink" title="3.7 插入目录"></a>3.7 插入目录</h2><p>操作：[toc]+enter</p>
<p>[toc]</p>
]]></content>
      <categories>
        <category>typora</category>
      </categories>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>websocket和socket.io的例子</title>
    <url>/posts/37d0532b.html</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>WebScoket是一种让客户端和服务器之间能进行双向实时通信的技术。它是HTML最新标准HTML5的一个协议规范，本质上是个基于TCP的协议，它通过HTTP&#x2F;HTTPS协议发送一条特殊的请求进行握手后创建了一个TCP连接，此后浏览器&#x2F;客户端和服务器之间便可以通过此连接来进行双向实时通信。</p>
<p>socket.io 是基于 Node.js 和 WebSocket 协议的实时通信开源框架，它包括客户端的JavaScript和服务器端的Node.js。WebSocket是SocketIO的一个子集。</p>
<h1 id="相关网址"><a href="#相关网址" class="headerlink" title="相关网址"></a>相关网址</h1><p>socket.io官方文档：<a href="https://socket.io/get-started/chat#introduction">|入门Socket.IO</a></p>
<p>nodejs官网：<a href="https://nodejs.org/en/">Node.js (nodejs.org)</a></p>
<h1 id="使用socket-io来实现websocket"><a href="#使用socket-io来实现websocket" class="headerlink" title="使用socket.io来实现websocket"></a>使用socket.io来实现websocket</h1><h2 id="下载相应的包"><a href="#下载相应的包" class="headerlink" title="下载相应的包"></a>下载相应的包</h2><p>首先需要安装express和socket.io库</p>
<p>输入<code>npm install express --save</code></p>
<p>输入<code>npm install socket.io--save</code></p>
<p>我新建了一个demo1文件夹，在此文件夹下进入cmd，然后执行上面的命令，就可以下载到下图出来index.html以为的文件。</p>
<p>其中index.html为后面例子的前端页面，node_modules文件夹里面存放了一个app.js文件为后面例子的后端逻辑。</p>
<p><img src="C:\Users\cqy\AppData\Roaming\Typora\typora-user-images\image-20220708131803222.png" alt="image-20220708131803222"></p>
<h2 id="实现一个小功能"><a href="#实现一个小功能" class="headerlink" title="实现一个小功能"></a>实现一个小功能</h2><p>接下来实现 对 <code>/</code> 和 <code>/test</code> 两个路径的监听</p>
<ul>
<li><code>/</code>返回hello world</li>
<li><code>/test</code>返回html连接页面</li>
</ul>
<h3 id="后端app-js"><a href="#后端app-js" class="headerlink" title="后端app.js"></a>后端app.js</h3><p><strong>（在node_modules里面）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">express</span> <span class="operator">=</span> require(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="type">const</span> <span class="variable">app</span> <span class="operator">=</span> express();</span><br><span class="line"><span class="type">const</span> <span class="variable">http</span> <span class="operator">=</span> require(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="type">const</span> <span class="variable">server</span> <span class="operator">=</span> http.createServer(app);</span><br><span class="line">const &#123; Server &#125; = require(<span class="string">&quot;socket.io&quot;</span>);</span><br><span class="line"><span class="type">const</span> <span class="variable">io</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(server);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/&#x27;</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(<span class="string">&#x27;&lt;h1&gt;Hello world&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/test&#x27;</span>, (req, res) =&gt; &#123;</span><br><span class="line">  res.sendFile(__dirname + <span class="string">&#x27;/index.html&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// io.on(&#x27;connection&#x27;, (socket) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&#x27;a user connected&#x27;);</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"><span class="comment">//by zhengkai.blog.csdn.net</span></span><br><span class="line"><span class="comment">//处理socket.on信息并socket.emit回复信息</span></span><br><span class="line"><span class="comment">//这里对接收到的msg做大写处理</span></span><br><span class="line">io.on(<span class="string">&#x27;connection&#x27;</span>, (socket) =&gt; &#123;</span><br><span class="line">    <span class="comment">//Socket.io by zhengkai.blog.csdn.net</span></span><br><span class="line">    socket.on(<span class="string">&#x27;chat message&#x27;</span>, (msg) =&gt; &#123;</span><br><span class="line">      console.log(<span class="string">&#x27;received: &#x27;</span> + msg);</span><br><span class="line">      socket.emit(<span class="string">&quot;chat message&quot;</span>, msg.toUpperCase());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">//监听端口3000</span></span><br><span class="line">server.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  console.log(<span class="string">&#x27;listening on *:3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>其中下面const这部分</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">express</span> <span class="operator">=</span> require(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="type">const</span> <span class="variable">app</span> <span class="operator">=</span> express();</span><br><span class="line"><span class="type">const</span> <span class="variable">http</span> <span class="operator">=</span> require(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="type">const</span> <span class="variable">server</span> <span class="operator">=</span> http.createServer(app);</span><br><span class="line">const &#123; Server &#125; = require(<span class="string">&quot;socket.io&quot;</span>);</span><br><span class="line"><span class="type">const</span> <span class="variable">io</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Server</span>(server);</span><br></pre></td></tr></table></figure>

<p>表示使用express框架、使用http协议、使用socket.io这个库</p>
<h3 id="前端页面index-html"><a href="#前端页面index-html" class="headerlink" title="前端页面index.html"></a>前端页面index.html</h3><p><strong>（在demo1文件夹里面）</strong></p>
<p>前端的功能描述如下：</p>
<ul>
<li>message的ul，可以用来追加li信息，显示记录往来</li>
<li>一个form表单，用来提交要发送的信息</li>
</ul>
<p>script部分而言，首先使用官方的socket.io 的js client ， 初始化一个连接，添加监听事件：</p>
<ul>
<li>输入非空内容提交后，发送信息给websocket后台，同时也输出在信息列表</li>
<li>接收到信息之后，显示在信息列表</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Socket.IO chat<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-tag">body</span> &#123; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding-bottom</span>: <span class="number">3rem</span>; <span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, <span class="string">&quot;Segoe UI&quot;</span>, Roboto, Helvetica, Arial, sans-serif; &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#form</span> &#123; <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.15</span>); <span class="attribute">padding</span>: <span class="number">0.25rem</span>; <span class="attribute">position</span>: fixed; <span class="attribute">bottom</span>: <span class="number">0</span>; <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">right</span>: <span class="number">0</span>; <span class="attribute">display</span>: flex; <span class="attribute">height</span>: <span class="number">3rem</span>; <span class="attribute">box-sizing</span>: border-box; backdrop-<span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">10px</span>); &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#input</span> &#123; <span class="attribute">border</span>: none; <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1rem</span>; <span class="attribute">flex-grow</span>: <span class="number">1</span>; <span class="attribute">border-radius</span>: <span class="number">2rem</span>; <span class="attribute">margin</span>: <span class="number">0.25rem</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#input</span><span class="selector-pseudo">:focus</span> &#123; <span class="attribute">outline</span>: none; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#form</span> &gt; <span class="selector-tag">button</span> &#123; <span class="attribute">background</span>: <span class="number">#333</span>; <span class="attribute">border</span>: none; <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1rem</span>; <span class="attribute">margin</span>: <span class="number">0.25rem</span>; <span class="attribute">border-radius</span>: <span class="number">3px</span>; <span class="attribute">outline</span>: none; <span class="attribute">color</span>: <span class="number">#fff</span>; &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#messages</span> &#123; <span class="attribute">list-style-type</span>: none; <span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#messages</span> &gt; <span class="selector-tag">li</span> &#123; <span class="attribute">padding</span>: <span class="number">0.5rem</span> <span class="number">1rem</span>; &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-id">#messages</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(odd) &#123; <span class="attribute">background</span>: <span class="number">#efefef</span>; &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;input&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/socket.io/socket.io.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> socket = <span class="title function_">io</span>();</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> messages = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;messages&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;form&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> input = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//输出到屏幕</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">addMessage</span>(<span class="params">str</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        li.<span class="property">innerHTML</span>=str;</span></span><br><span class="line"><span class="language-javascript">        messages.<span class="title function_">appendChild</span>(li); </span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(form)</span></span></span><br><span class="line"><span class="language-javascript">    form.<span class="title function_">addEventListener</span>(<span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      e.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (input.<span class="property">value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//Socket.io by zhengkai.blog.csdn.net</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> msg = <span class="string">&#x27;发送消息:&#x27;</span>+input.<span class="property">value</span> ;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span></span><br><span class="line"><span class="language-javascript">        socket.<span class="title function_">emit</span>(<span class="string">&#x27;chat message&#x27;</span>, input.<span class="property">value</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">addMessage</span>(msg);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//清空个输入框</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//input.value = &#x27;&#x27;;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">    socket.<span class="title function_">on</span>(<span class="string">&quot;chat message&quot;</span>, <span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> msg = <span class="string">&#x27;接收消息:&#x27;</span>+arg ;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg); <span class="comment">// world</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">addMessage</span>(msg);</span></span><br><span class="line"><span class="language-javascript">    &#125;); </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时，在对应的文件路径demo1打开cmd，输入</p>
<p><code>node app.js</code></p>
<p>打开<a href="http://localhost:3000/">http://localhost:3000/</a></p>
<p>便可以了，效果图如下</p>
<p><img src="C:\Users\cqy\AppData\Roaming\Typora\typora-user-images\image-20220708132247395.png" alt="image-20220708132247395"></p>
<h2 id="函数功能说明"><a href="#函数功能说明" class="headerlink" title="函数功能说明"></a>函数功能说明</h2><p>socket.on(“chat message”,callback function)<br>表示开始监听”chat message”通道，只要前后端都是一致的通道即可。</p>
<p>socket.emit(“chat message”, msg.toUpperCase());<br>表示对这个”chat message”通道进行回复，我们暂时是对英文字母做大写处理并返回。</p>
<h3 id="emit-和-on"><a href="#emit-和-on" class="headerlink" title="emit 和 on"></a>emit 和 on</h3><p>Socket.IO服务器具有一个sockets属性，属性值为所有与客户端建立连接的socket对象。可以利用该对象的send方法或者emit方法向所有客户端广播消息。emit 和 on 是最重要的两个 API，分别对应 发送 和 监听 事件。我们可以非常自由的在服务端定义并发送一个事件emit，然后在客户端监听 on，反过来也一样。</p>
<h3 id="emit的使用方式"><a href="#emit的使用方式" class="headerlink" title="emit的使用方式"></a>emit的使用方式</h3><p><strong>在发生特定情况时发送一个action命令</strong></p>
<pre><code>   a）命令可以只有一个名字
   
   io.emit(&#39;自命名&#39;)

　　b）命令可以除了名字还有数据

　　　　io.emit(&#39;自命名&#39;,a)

　　c）命令可以除了名字还有多个数据

　　　　io.emit(&#39;自命名&#39;,a，b，c，...，d)

　　d）命令可以除了名字还有回调函数

　　　　io.emit(&#39;自命名&#39;,data，function(a,b)&#123; &#125; )
</code></pre>
<p><strong>此时对应接收数据的地方应该建议与socket的链接</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">var</span> <span class="variable">socket</span> <span class="operator">=</span> io(<span class="string">&#x27;http://localhost:9002&#x27;</span>);</span><br><span class="line">socket.on(<span class="string">&#x27;msg&#x27;</span>, function (msg) &#123;</span><br><span class="line">　　location.reload();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><strong>此时的socket.on与上述一一对应</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">　　a）命令可以只有一个名字</span><br><span class="line"></span><br><span class="line">　　　　socket.on(&#x27;自命名&#x27;，function()&#123; &#125; )</span><br><span class="line"></span><br><span class="line">　　b）命令可以除了名字还有数据</span><br><span class="line"></span><br><span class="line">　　　　socket.on(&#x27;自命名&#x27;,  function(data)&#123;  &#125; )</span><br><span class="line"></span><br><span class="line">　　c）命令可以除了名字还有多个数据</span><br><span class="line"></span><br><span class="line">　　　　socket.on(&#x27;自命名&#x27;,  function(a,b,c,...,d)&#123;  &#125; )</span><br><span class="line"></span><br><span class="line">　　d）命令可以除了名字数据还有回调函数</span><br><span class="line"></span><br><span class="line">　　　　socket.on(&#x27;自命名&#x27;,  function(data，fn)&#123;  fn(a,b);  &#125;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>websocket</category>
        <category>socket.io</category>
      </categories>
      <tags>
        <tag>websocket</tag>
        <tag>socket.io</tag>
        <tag>nodejs</tag>
        <tag>npm</tag>
        <tag>express</tag>
      </tags>
  </entry>
</search>
